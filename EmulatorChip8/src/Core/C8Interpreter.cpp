#include "C8Interpreter.h"

namespace Chip8
{
	C8Interpreter::C8Interpreter(C8Window& output_window) : output_window(output_window)
	{
		memory = C8Memory();
		paused = true;
		
		display_buffer = new c8byte[UNSCALED_HEIGHT * UNSCALED_WIDTH];

		load_text_sprites();

		C8Interpreter* instance_ptr = this;

//		output_window.add_update_event_listener([](C8EventType type, void* data) { instance_ptr->update(type, data); });
	}

	void C8Interpreter::update(C8EventType type, void* data)
	{
		C8Interpreter* instance_ptr = (C8Interpreter*) data;
		instance_ptr->run();
	}

	void C8Interpreter::run()
	{
		output_window.set_colors(display_buffer);
	}

	void C8Interpreter::load_text_sprites()
	{
		c8byte sprites[TEXT_SPRITE_SIZE_BYTES * TEXT_SPRITE_COUNT]
		{
			0xF0, 0x90, 0x90, 0x90, 0xF0,	// 0
			0x20, 0x60, 0x20, 0x20, 0x70,	// 1
			0xF0, 0x10, 0xF0, 0x80, 0xF0,	// 2
			0xF0, 0x10, 0xF0, 0x10, 0xF0,	// 3
			0x90, 0x90, 0xF0, 0x10, 0x10,	// 4
			0xF0, 0x80, 0xF0, 0x10, 0xF0,	// 5
			0xF0, 0x80, 0xF0, 0x90, 0xF0,	// 6
			0xF0, 0x10, 0x20, 0x40, 0x40,	// 7
			0xF0, 0x90, 0xF0, 0x90, 0xF0,	// 8
			0xF0, 0x90, 0xF0, 0x10, 0xF0,	// 9
			0xF0, 0x90, 0xF0, 0x90, 0x90,	// A
			0xE0, 0x90, 0xE0, 0x90, 0xE0,	// B
			0xF0, 0x80, 0x80, 0x80, 0xF0,	// C
			0xE0, 0x90, 0x90, 0x90, 0xE0,	// D
			0xF0, 0x80, 0xF0, 0x80, 0xF0,	// E
			0xF0, 0x80, 0xF0, 0x80, 0x80	// F
		};

		for (int i = 0; i < TEXT_SPRITE_SIZE_BYTES * TEXT_SPRITE_COUNT; i++)
			memory[TEXT_SPRITE_MEM_STRART + i] = sprites[i];
	}

	C8Interpreter::~C8Interpreter()
	{
		delete[] display_buffer;
	}
}